# main.py
# An√°lise de Estresse Acad√™mico - Script Completo
# =========================================================

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Configurar estilo dos gr√°ficos
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 10

# =========================================================
# CONFIGURA√á√ïES (OVERRIDE - ajuste aqui se necess√°rio)
# =========================================================
STRESS_COL_OVERRIDE = None  # Ex: "Rate your academic stress index"
BAD_HABITS_COL_OVERRIDE = None  # Ex: "Do you have any bad habits"
STUDY_ENV_COL_OVERRIDE = None  # Ex: "Study Environment"
ACADEMIC_STAGE_COL_OVERRIDE = None  # Ex: "Academic Stage"
COPING_COL_OVERRIDE = None  # Ex: "What coping strategies do you use"

# =========================================================
# 1) LEITURA DO CSV COM FALLBACK DE ENCODINGS
# =========================================================
print("=" * 60)
print("AN√ÅLISE DE ESTRESSE ACAD√äMICO")
print("=" * 60)

arquivo_csv = "academic Stress level - maintainance 1.csv"
df = None

for encoding in ['utf-8', 'latin1', 'cp1252']:
    try:
        df = pd.read_csv(arquivo_csv, encoding=encoding)
        print(f"\n‚úì Arquivo lido com sucesso (encoding: {encoding})")
        print(f"‚úì Total de registros: {len(df)}")
        break
    except:
        continue

if df is None:
    raise Exception("N√£o foi poss√≠vel ler o arquivo CSV com nenhum dos encodings dispon√≠veis.")

# Criar diret√≥rio de outputs
Path("outputs").mkdir(exist_ok=True)

# =========================================================
# 2) DETEC√á√ÉO AUTOM√ÅTICA DE COLUNAS (FUZZY MATCHING)
# =========================================================
print("\n" + "=" * 60)
print("DETECTANDO COLUNAS...")
print("=" * 60)

def encontrar_coluna(df, palavras_chave, override=None):
    """Encontra coluna por palavras-chave com fuzzy matching"""
    if override:
        if override in df.columns:
            return override
        else:
            print(f"‚ö† Override '{override}' n√£o encontrado nas colunas.")
    
    for col in df.columns:
        col_lower = col.lower()
        for palavra in palavras_chave:
            if palavra.lower() in col_lower:
                return col
    return None

# Detectar colunas
stress_col = encontrar_coluna(df, ['stress', 'index', 'estresse'], STRESS_COL_OVERRIDE)
bad_habits_col = encontrar_coluna(df, ['bad habits', 'habits', 'maus h√°bitos'], BAD_HABITS_COL_OVERRIDE)
study_env_col = encontrar_coluna(df, ['study environment', 'environment', 'ambiente'], STUDY_ENV_COL_OVERRIDE)
academic_stage_col = encontrar_coluna(df, ['academic stage', 'stage', 'etapa'], ACADEMIC_STAGE_COL_OVERRIDE)
coping_col = encontrar_coluna(df, ['coping', 'strategies', 'estrat√©gias'], COPING_COL_OVERRIDE)

# Mostrar colunas detectadas
print(f"\n‚úì Coluna de Stress: {stress_col}")
print(f"‚úì Coluna de Maus H√°bitos: {bad_habits_col}")
print(f"‚úì Coluna de Ambiente de Estudo: {study_env_col}")
print(f"‚úì Coluna de Etapa Acad√™mica: {academic_stage_col}")
print(f"‚úì Coluna de Estrat√©gias de Coping: {coping_col}")

# Verificar se encontrou as colunas principais
if not stress_col:
    print("\n‚ö† ATEN√á√ÉO: Coluna de stress n√£o encontrada!")
    print("Configure STRESS_COL_OVERRIDE no in√≠cio do c√≥digo.")

# =========================================================
# 3) LIMPEZA E PREPARA√á√ÉO DOS DADOS
# =========================================================
print("\n" + "=" * 60)
print("LIMPEZA DOS DADOS...")
print("=" * 60)

# Remover duplicados
df_original = len(df)
df = df.drop_duplicates()
print(f"‚úì Duplicados removidos: {df_original - len(df)}")

# Converter coluna de stress para num√©rico
def extrair_numero_stress(valor):
    """Extrai n√∫mero do valor de stress"""
    if pd.isna(valor):
        return np.nan
    
    # Se j√° for n√∫mero
    if isinstance(valor, (int, float)):
        return float(valor)
    
    # Converter para string e tentar extrair n√∫mero
    texto = str(valor).lower().strip()
    
    # Mapeamento de textos ordinais
    mapa_ordinal = {
        'very low': 1, 'muito baixo': 1,
        'low': 2, 'baixo': 2,
        'medium': 3, 'm√©dio': 3, 'moderate': 3,
        'high': 4, 'alto': 4,
        'very high': 5, 'muito alto': 5
    }
    
    # Verificar mapeamento ordinal
    for chave, valor in mapa_ordinal.items():
        if chave in texto:
            return float(valor)
    
    # Tentar extrair n√∫mero do texto
    import re
    numeros = re.findall(r'\d+\.?\d*', texto)
    if numeros:
        return float(numeros[0])
    
    return np.nan

if stress_col:
    df['stress_numerico'] = df[stress_col].apply(extrair_numero_stress)
    valores_validos = df['stress_numerico'].notna().sum()
    print(f"‚úì Valores de stress convertidos: {valores_validos} de {len(df)}")
else:
    print("‚ö† Convers√£o de stress pulada (coluna n√£o encontrada)")

print(f"\n‚úì Dataset final: {len(df)} registros")

# =========================================================
# AN√ÅLISE 01: DISTRIBUI√á√ÉO DO √çNDICE DE STRESS
# =========================================================
print("\n" + "=" * 60)
print("AN√ÅLISE 01: DISTRIBUI√á√ÉO DO √çNDICE DE STRESS")
print("=" * 60)

if stress_col and 'stress_numerico' in df.columns:
    stress_dados = df['stress_numerico'].dropna()
    
    # Estat√≠sticas descritivas
    print("\nESTAT√çSTICAS DESCRITIVAS:")
    print(f"  M√©dia: {stress_dados.mean():.2f}")
    print(f"  Mediana: {stress_dados.median():.2f}")
    print(f"  Desvio Padr√£o: {stress_dados.std():.2f}")
    print(f"  M√≠nimo: {stress_dados.min():.2f}")
    print(f"  M√°ximo: {stress_dados.max():.2f}")
    print(f"\nPERCENTIS:")
    print(f"  25%: {stress_dados.quantile(0.25):.2f}")
    print(f"  50%: {stress_dados.quantile(0.50):.2f}")
    print(f"  75%: {stress_dados.quantile(0.75):.2f}")
    
    # Criar gr√°ficos
    fig, axes = plt.subplots(1, 2, figsize=(14, 5))
    
    # Histograma com KDE
    axes[0].hist(stress_dados, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0].set_xlabel('√çndice de Stress')
    axes[0].set_ylabel('Frequ√™ncia')
    axes[0].set_title('Distribui√ß√£o do √çndice de Stress')
    axes[0].grid(axis='y', alpha=0.3)
    
    # Boxplot
    axes[1].boxplot(stress_dados, vert=True)
    axes[1].set_ylabel('√çndice de Stress')
    axes[1].set_title('Boxplot do √çndice de Stress')
    axes[1].grid(axis='y', alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('outputs/01_distribuicao_stress.png', dpi=300, bbox_inches='tight')
    print("\n‚úì Gr√°fico salvo: outputs/01_distribuicao_stress.png")
    
    print("\nüìä INTERPRETA√á√ÉO:")
    print("A distribui√ß√£o do estresse acad√™mico mostra como os n√≠veis de stress")
    print("est√£o distribu√≠dos entre os estudantes. Uma m√©dia alta indica que a maioria")
    print("dos estudantes enfrenta n√≠veis elevados de estresse acad√™mico.")
    
else:
    print("‚ö† An√°lise n√£o realizada: coluna de stress n√£o encontrada")

# =========================================================
# AN√ÅLISE 03: PROPOR√á√ÉO DE MAUS H√ÅBITOS
# =========================================================
print("\n" + "=" * 60)
print("AN√ÅLISE 03: PROPOR√á√ÉO DE MAUS H√ÅBITOS")
print("=" * 60)

if bad_habits_col:
    # Limpar e contar
    df[bad_habits_col] = df[bad_habits_col].astype(str).str.strip().str.lower()
    contagem = df[bad_habits_col].value_counts()
    
    # Calcular percentuais
    total = len(df)
    yes_count = contagem.get('yes', 0)
    no_count = contagem.get('no', 0)
    yes_pct = (yes_count / total) * 100
    no_pct = (no_count / total) * 100
    
    print(f"\nRESULTADOS:")
    print(f"  Sim (Yes): {yes_count} estudantes ({yes_pct:.1f}%)")
    print(f"  N√£o (No): {no_count} estudantes ({no_pct:.1f}%)")
    
    # Gr√°fico de barras
    fig, ax = plt.subplots(figsize=(8, 6))
    categorias = ['Sim', 'N√£o']
    valores = [yes_count, no_count]
    cores = ['#ff6b6b', '#51cf66']
    
    bars = ax.bar(categorias, valores, color=cores, edgecolor='black', alpha=0.7)
    ax.set_ylabel('N√∫mero de Estudantes')
    ax.set_title('Estudantes com Maus H√°bitos')
    ax.grid(axis='y', alpha=0.3)
    
    # Adicionar percentuais nas barras
    for bar, valor, pct in zip(bars, valores, [yes_pct, no_pct]):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height,
                f'{valor}\n({pct:.1f}%)',
                ha='center', va='bottom', fontsize=11, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('outputs/03_maus_habitos.png', dpi=300, bbox_inches='tight')
    print("\n‚úì Gr√°fico salvo: outputs/03_maus_habitos.png")
    
    print("\nüìä INTERPRETA√á√ÉO:")
    print(f"Um total de {yes_pct:.1f}% dos estudantes reportaram ter maus h√°bitos.")
    print("Este √© um indicador importante de comportamentos que podem afetar")
    print("o desempenho acad√™mico e a sa√∫de mental dos estudantes.")
    
else:
    print("‚ö† An√°lise n√£o realizada: coluna de maus h√°bitos n√£o encontrada")

# =========================================================
# AN√ÅLISE 05: STRESS POR AMBIENTE DE ESTUDO
# =========================================================
print("\n" + "=" * 60)
print("AN√ÅLISE 05: STRESS POR AMBIENTE DE ESTUDO")
print("=" * 60)

if study_env_col and 'stress_numerico' in df.columns:
    # Calcular m√©dia por ambiente
    stress_por_ambiente = df.groupby(study_env_col)['stress_numerico'].agg(['mean', 'count', 'std'])
    stress_por_ambiente = stress_por_ambiente.sort_values('mean', ascending=False)
    
    print("\nM√âDIA DE STRESS POR AMBIENTE:")
    for ambiente, dados in stress_por_ambiente.iterrows():
        print(f"  {ambiente}: {dados['mean']:.2f} (n={int(dados['count'])}, DP={dados['std']:.2f})")
    
    print(f"\nüî¥ MAIOR STRESS: {stress_por_ambiente.index[0]} ({stress_por_ambiente['mean'].iloc[0]:.2f})")
    print(f"üü¢ MENOR STRESS: {stress_por_ambiente.index[-1]} ({stress_por_ambiente['mean'].iloc[-1]:.2f})")
    
    # Gr√°fico de barras
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.barh(stress_por_ambiente.index, stress_por_ambiente['mean'], 
                   color='coral', edgecolor='black', alpha=0.7)
    ax.set_xlabel('M√©dia de Stress')
    ax.set_title('N√≠vel M√©dio de Stress por Ambiente de Estudo')
    ax.grid(axis='x', alpha=0.3)
    
    # Adicionar valores nas barras
    for bar, valor in zip(bars, stress_por_ambiente['mean']):
        width = bar.get_width()
        ax.text(width, bar.get_y() + bar.get_height()/2.,
                f'{valor:.2f}',
                ha='left', va='center', fontsize=10, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('outputs/05_stress_por_ambiente.png', dpi=300, bbox_inches='tight')
    print("\n‚úì Gr√°fico salvo: outputs/05_stress_por_ambiente.png")
    
    print("\nüìä INTERPRETA√á√ÉO:")
    print("O ambiente de estudo tem impacto significativo no n√≠vel de estresse.")
    print("Ambientes com maior stress podem indicar condi√ß√µes inadequadas para estudo,")
    print("enquanto ambientes com menor stress podem oferecer melhores condi√ß√µes.")
    
else:
    print("‚ö† An√°lise n√£o realizada: colunas necess√°rias n√£o encontradas")

# =========================================================
# AN√ÅLISE 07: RELA√á√ÉO ENTRE MAUS H√ÅBITOS E STRESS
# =========================================================
print("\n" + "=" * 60)
print("AN√ÅLISE 07: RELA√á√ÉO ENTRE MAUS H√ÅBITOS E STRESS")
print("=" * 60)

if bad_habits_col and 'stress_numerico' in df.columns:
    # Preparar dados
    df_analise = df[[bad_habits_col, 'stress_numerico']].copy()
    df_analise[bad_habits_col] = df_analise[bad_habits_col].str.lower().str.strip()
    df_analise = df_analise[df_analise[bad_habits_col].isin(['yes', 'no'])]
    df_analise = df_analise.dropna()
    
    # Estat√≠sticas por grupo
    grupo_yes = df_analise[df_analise[bad_habits_col] == 'yes']['stress_numerico']
    grupo_no = df_analise[df_analise[bad_habits_col] == 'no']['stress_numerico']
    
    print("\nESTAT√çSTICAS POR GRUPO:")
    print(f"  COM maus h√°bitos (Yes):")
    print(f"    M√©dia: {grupo_yes.mean():.2f}")
    print(f"    Desvio Padr√£o: {grupo_yes.std():.2f}")
    print(f"    N: {len(grupo_yes)}")
    print(f"  SEM maus h√°bitos (No):")
    print(f"    M√©dia: {grupo_no.mean():.2f}")
    print(f"    Desvio Padr√£o: {grupo_no.std():.2f}")
    print(f"    N: {len(grupo_no)}")
    
    # Teste t de Welch
    if len(grupo_yes) > 1 and len(grupo_no) > 1:
        t_stat, p_value = stats.ttest_ind(grupo_yes, grupo_no, equal_var=False)
        print(f"\nTESTE T (Welch):")
        print(f"  Estat√≠stica t: {t_stat:.4f}")
        print(f"  P-valor: {p_value:.4f}")
        
        if p_value < 0.05:
            print(f"  ‚úì Diferen√ßa SIGNIFICATIVA (p < 0.05)")
        else:
            print(f"  ‚úó Diferen√ßa N√ÉO significativa (p >= 0.05)")
    
    # Boxplot
    fig, ax = plt.subplots(figsize=(8, 6))
    data_plot = [grupo_no, grupo_yes]
    bp = ax.boxplot(data_plot, labels=['Sem Maus H√°bitos', 'Com Maus H√°bitos'],
                    patch_artist=True)
    
    # Colorir boxplots
    colors = ['#51cf66', '#ff6b6b']
    for patch, color in zip(bp['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_alpha(0.7)
    
    ax.set_ylabel('√çndice de Stress')
    ax.set_title('Compara√ß√£o de Stress: Com vs Sem Maus H√°bitos')
    ax.grid(axis='y', alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('outputs/07_maus_habitos_stress.png', dpi=300, bbox_inches='tight')
    print("\n‚úì Gr√°fico salvo: outputs/07_maus_habitos_stress.png")
    
    print("\nüìä INTERPRETA√á√ÉO:")
    print("Esta an√°lise investiga se estudantes com maus h√°bitos apresentam n√≠veis")
    print("diferentes de estresse comparados aos sem maus h√°bitos. Um p-valor < 0.05")
    print("indica que a diferen√ßa √© estatisticamente significativa.")
    
else:
    print("‚ö† An√°lise n√£o realizada: colunas necess√°rias n√£o encontradas")

# =========================================================
# AN√ÅLISE 09: USO DE "EMOTIONAL BREAKDOWN" POR ETAPA ACAD√äMICA
# =========================================================
print("\n" + "=" * 60)
print("AN√ÅLISE 09: USO DE 'EMOTIONAL BREAKDOWN' POR ETAPA")
print("=" * 60)

if coping_col and academic_stage_col:
    # Fun√ß√£o para detectar emotional breakdown
    def tem_emotional_breakdown(texto):
        if pd.isna(texto):
            return False
        texto = str(texto).lower()
        palavras_chave = ['emotional', 'cry', 'crying', 'breakdown', 'chorar', 'choro']
        return any(palavra in texto for palavra in palavras_chave)
    
    # Aplicar detec√ß√£o
    df['tem_breakdown'] = df[coping_col].apply(tem_emotional_breakdown)
    
    # Calcular percentuais por etapa
    resultado = df.groupby(academic_stage_col).agg(
        total=('tem_breakdown', 'count'),
        com_breakdown=('tem_breakdown', 'sum')
    )
    resultado['percentual'] = (resultado['com_breakdown'] / resultado['total']) * 100
    resultado = resultado.sort_values('percentual', ascending=False)
    
    print("\nPERCENTUAL DE USO POR ETAPA ACAD√äMICA:")
    for etapa, dados in resultado.iterrows():
        print(f"  {etapa}: {dados['percentual']:.1f}% ({int(dados['com_breakdown'])}/{int(dados['total'])})")
    
    # Gr√°fico de barras
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.barh(resultado.index, resultado['percentual'], 
                   color='mediumpurple', edgecolor='black', alpha=0.7)
    ax.set_xlabel('Percentual (%)')
    ax.set_title('Uso de "Emotional Breakdown" como Estrat√©gia de Coping por Etapa Acad√™mica')
    ax.grid(axis='x', alpha=0.3)
    
    # Adicionar valores nas barras
    for bar, valor in zip(bars, resultado['percentual']):
        width = bar.get_width()
        ax.text(width, bar.get_y() + bar.get_height()/2.,
                f'{valor:.1f}%',
                ha='left', va='center', fontsize=10, fontweight='bold')
    
    plt.tight_layout()
    plt.savefig('outputs/09_emotional_breakdown_por_etapa.png', dpi=300, bbox_inches='tight')
    print("\n‚úì Gr√°fico salvo: outputs/09_emotional_breakdown_por_etapa.png")
    
    print("\nüìä INTERPRETA√á√ÉO:")
    print("Esta an√°lise mostra qual percentual de estudantes em cada etapa acad√™mica")
    print("utiliza 'emotional breakdown' (chorar, colapsos emocionais) como estrat√©gia")
    print("de coping. Percentuais altos podem indicar n√≠veis cr√≠ticos de estresse.")
    
else:
    print("‚ö† An√°lise n√£o realizada: colunas necess√°rias n√£o encontradas")

# =========================================================
# CONCLUS√ÉO E PR√ìXIMOS PASSOS
# =========================================================
print("\n" + "=" * 60)
print("AN√ÅLISE COMPLETA!")
print("=" * 60)
print("\nüìÅ Todos os gr√°ficos foram salvos na pasta 'outputs/'")
print("\nüí° PR√ìXIMOS PASSOS SUGERIDOS:")
print("  1. Verificar a qualidade dos dados e poss√≠veis outliers")
print("  2. Analisar correla√ß√µes entre m√∫ltiplas vari√°veis")
print("  3. Realizar an√°lise de regress√£o para prever n√≠veis de stress")
print("  4. Investigar estrat√©gias de coping mais efetivas")
print("  5. Comparar diferentes grupos demogr√°ficos (se houver dados)")
print("\n‚úì An√°lise finalizada com sucesso!")